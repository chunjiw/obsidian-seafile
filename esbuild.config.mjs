import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs-extra";
import CssModulesPlugin from 'esbuild-css-modules-plugin';

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: "dist",
	plugins: [
		CssModulesPlugin({
			force: true,
			inject: false,
			pattern: "[local]-[hash]",
			localsConvention: "camelCase"
		}),
		{
			name: "post-build",
			setup(build) {
				let appSettings = "";
				build.onStart(() => {
					if (fs.existsSync("dist/data.json"))
						appSettings = JSON.parse(fs.readFileSync("vault/.obsidian/plugins/obsidian-seafile/data.json", "utf-8"));
					fs.rmSync("dist", { recursive: true, force: true });
				});
				build.onEnd(async result => {
					// Copy dist/src folder to dist/ folder
					fs.copySync("dist/src", "dist");
					fs.rmSync("dist/src", { recursive: true, force: true });
					fs.renameSync("dist/main.css", "dist/styles.css");

					// Add file .hotreload if in development
					if (!prod) {
						fs.writeFileSync("dist/.hotreload", "");
					}
					fs.copyFileSync("manifest.json", "dist/manifest.json");
					fs.writeFileSync("dist/data.json", JSON.stringify(appSettings));

					// Copy dist folder to test vault
					const testVaultPath = "vault/.obsidian/plugins/obsidian-seafile";
					if (fs.existsSync(testVaultPath))
						fs.rmSync(testVaultPath, { recursive: true, force: true });
					fs.copySync("dist", testVaultPath);
				});
			}
		}],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}